// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using game_pulse.Data.Contexts;

#nullable disable

namespace game_pulse.Data.Migrations
{
    [DbContext(typeof(GamePulseDbContext))]
    [Migration("20250521010932_InsertSomeCourts")]
    partial class InsertSomeCourts
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CourtSport", b =>
                {
                    b.Property<int>("CourtId")
                        .HasColumnType("integer")
                        .HasColumnName("court_id");

                    b.Property<int>("SportId")
                        .HasColumnType("integer")
                        .HasColumnName("sport_id");

                    b.HasKey("CourtId", "SportId")
                        .HasName("court_sports_pkey");

                    b.HasIndex("SportId");

                    b.ToTable("court_sports", (string)null);
                });

            modelBuilder.Entity("game_pulse.Data.Models.Court", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character(2)")
                        .HasColumnName("country")
                        .IsFixedLength();

                    b.Property<string>("GMaps")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("g_maps");

                    b.Property<string>("Map")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("map");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.HasKey("Id")
                        .HasName("courts_pkey");

                    b.HasIndex(new[] { "City" }, "idx_courts_city");

                    b.HasIndex(new[] { "Name" }, "idx_courts_name");

                    b.ToTable("courts", (string)null);
                });

            modelBuilder.Entity("game_pulse.Data.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BestPlayerId")
                        .HasColumnType("integer")
                        .HasColumnName("best_player_id");

                    b.Property<int>("CourtId")
                        .HasColumnType("integer")
                        .HasColumnName("court_id");

                    b.Property<DateTime>("GameTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("game_time");

                    b.Property<int>("SportId")
                        .HasColumnType("integer")
                        .HasColumnName("sport_id");

                    b.HasKey("Id")
                        .HasName("games_pkey");

                    b.HasIndex("SportId");

                    b.HasIndex(new[] { "BestPlayerId" }, "idx_games_best_player_id");

                    b.HasIndex(new[] { "CourtId" }, "idx_games_court");

                    b.ToTable("games", (string)null);
                });

            modelBuilder.Entity("game_pulse.Data.Models.GamePlayer", b =>
                {
                    b.Property<int>("GameId")
                        .HasColumnType("integer")
                        .HasColumnName("game_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int?>("PlayerGrade")
                        .HasColumnType("integer")
                        .HasColumnName("player_grade");

                    b.Property<bool?>("Presence")
                        .HasColumnType("boolean")
                        .HasColumnName("presence");

                    b.HasKey("GameId", "UserId")
                        .HasName("game_players_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("game_players", (string)null);
                });

            modelBuilder.Entity("game_pulse.Data.Models.PlayerFavoritePosition", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("SportId")
                        .HasColumnType("integer")
                        .HasColumnName("sport_id");

                    b.Property<DateOnly>("AddedAt")
                        .HasColumnType("date")
                        .HasColumnName("added_at");

                    b.Property<int>("PositionId")
                        .HasColumnType("integer")
                        .HasColumnName("position_id");

                    b.HasKey("UserId", "SportId")
                        .HasName("player_favorite_position_pkey");

                    b.HasIndex("PositionId");

                    b.HasIndex("SportId");

                    b.ToTable("player_favorite_position", (string)null);
                });

            modelBuilder.Entity("game_pulse.Data.Models.Sport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("sports_pkey");

                    b.ToTable("sports", (string)null);
                });

            modelBuilder.Entity("game_pulse.Data.Models.SportsPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.Property<int>("SportId")
                        .HasColumnType("integer")
                        .HasColumnName("sport_id");

                    b.HasKey("Id")
                        .HasName("sports_positions_pkey");

                    b.HasIndex(new[] { "SportId" }, "idx_sports_positions_sport_id");

                    b.ToTable("sports_positions", (string)null);
                });

            modelBuilder.Entity("game_pulse.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("FavoriteSport")
                        .HasColumnType("integer")
                        .HasColumnName("favorite_sport");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("name");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("nickname");

                    b.Property<int>("Xp")
                        .HasColumnType("integer")
                        .HasColumnName("xp");

                    b.HasKey("Id")
                        .HasName("user_pkey");

                    b.HasIndex("FavoriteSport");

                    b.HasIndex(new[] { "Xp" }, "idx_user_xp");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("game_pulse.Data.Models.UserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessToken")
                        .HasColumnType("text")
                        .HasColumnName("access_token");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("provider");

                    b.Property<string>("ProviderAccountId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("provider_account_id");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime?>("TokenExpires")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("token_expires");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("user_accounts_pkey");

                    b.HasIndex(new[] { "UserId" }, "idx_user_accounts_user_id");

                    b.HasIndex(new[] { "Provider", "ProviderAccountId" }, "uq_provider_account")
                        .IsUnique();

                    b.ToTable("user_accounts", (string)null);
                });

            modelBuilder.Entity("game_pulse.Data.Models.UserInfo", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("Address")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("address");

                    b.Property<DateOnly?>("Birthday")
                        .HasColumnType("date")
                        .HasColumnName("birthday");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasMaxLength(2)
                        .HasColumnType("character(2)")
                        .HasColumnName("country")
                        .IsFixedLength();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("Phone")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("phone");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .HasColumnType("character(2)")
                        .HasColumnName("state")
                        .IsFixedLength();

                    b.HasKey("UserId")
                        .HasName("user_info_pkey");

                    b.HasIndex(new[] { "Birthday" }, "idx_user_info_birthday");

                    b.HasIndex(new[] { "City" }, "idx_user_info_city");

                    b.HasIndex(new[] { "Country" }, "idx_user_info_country");

                    b.HasIndex(new[] { "State" }, "idx_user_info_state");

                    b.ToTable("user_info", (string)null);
                });

            modelBuilder.Entity("CourtSport", b =>
                {
                    b.HasOne("game_pulse.Data.Models.Court", null)
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .IsRequired()
                        .HasConstraintName("fk_court_sports_court");

                    b.HasOne("game_pulse.Data.Models.Sport", null)
                        .WithMany()
                        .HasForeignKey("SportId")
                        .IsRequired()
                        .HasConstraintName("fk_court_sports_sport");
                });

            modelBuilder.Entity("game_pulse.Data.Models.Game", b =>
                {
                    b.HasOne("game_pulse.Data.Models.User", "BestPlayer")
                        .WithMany("Games")
                        .HasForeignKey("BestPlayerId")
                        .HasConstraintName("fk_games_best_player");

                    b.HasOne("game_pulse.Data.Models.Court", "Court")
                        .WithMany("Games")
                        .HasForeignKey("CourtId")
                        .IsRequired()
                        .HasConstraintName("fk_games_court");

                    b.HasOne("game_pulse.Data.Models.Sport", "Sport")
                        .WithMany("Games")
                        .HasForeignKey("SportId")
                        .IsRequired()
                        .HasConstraintName("fk_games_sport");

                    b.Navigation("BestPlayer");

                    b.Navigation("Court");

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("game_pulse.Data.Models.GamePlayer", b =>
                {
                    b.HasOne("game_pulse.Data.Models.Game", "Game")
                        .WithMany("GamePlayers")
                        .HasForeignKey("GameId")
                        .IsRequired()
                        .HasConstraintName("fk_game_players_game");

                    b.HasOne("game_pulse.Data.Models.User", "User")
                        .WithMany("GamePlayers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_game_players_user");

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("game_pulse.Data.Models.PlayerFavoritePosition", b =>
                {
                    b.HasOne("game_pulse.Data.Models.SportsPosition", "Position")
                        .WithMany("PlayerFavoritePositions")
                        .HasForeignKey("PositionId")
                        .IsRequired()
                        .HasConstraintName("fk_pfp_position");

                    b.HasOne("game_pulse.Data.Models.Sport", "Sport")
                        .WithMany("PlayerFavoritePositions")
                        .HasForeignKey("SportId")
                        .IsRequired()
                        .HasConstraintName("fk_pfp_sport");

                    b.HasOne("game_pulse.Data.Models.User", "User")
                        .WithMany("PlayerFavoritePositions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_pfp_user");

                    b.Navigation("Position");

                    b.Navigation("Sport");

                    b.Navigation("User");
                });

            modelBuilder.Entity("game_pulse.Data.Models.SportsPosition", b =>
                {
                    b.HasOne("game_pulse.Data.Models.Sport", "Sport")
                        .WithMany("SportsPositions")
                        .HasForeignKey("SportId")
                        .IsRequired()
                        .HasConstraintName("fk_sports_positions_sport");

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("game_pulse.Data.Models.User", b =>
                {
                    b.HasOne("game_pulse.Data.Models.Sport", "FavoriteSportNavigation")
                        .WithMany("Users")
                        .HasForeignKey("FavoriteSport")
                        .HasConstraintName("fk_favorite_sport");

                    b.Navigation("FavoriteSportNavigation");
                });

            modelBuilder.Entity("game_pulse.Data.Models.UserAccount", b =>
                {
                    b.HasOne("game_pulse.Data.Models.User", "User")
                        .WithMany("UserAccounts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_user_accounts_user");

                    b.Navigation("User");
                });

            modelBuilder.Entity("game_pulse.Data.Models.UserInfo", b =>
                {
                    b.HasOne("game_pulse.Data.Models.User", "User")
                        .WithOne("UserInfo")
                        .HasForeignKey("game_pulse.Data.Models.UserInfo", "UserId")
                        .IsRequired()
                        .HasConstraintName("fk_user_info_user");

                    b.Navigation("User");
                });

            modelBuilder.Entity("game_pulse.Data.Models.Court", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("game_pulse.Data.Models.Game", b =>
                {
                    b.Navigation("GamePlayers");
                });

            modelBuilder.Entity("game_pulse.Data.Models.Sport", b =>
                {
                    b.Navigation("Games");

                    b.Navigation("PlayerFavoritePositions");

                    b.Navigation("SportsPositions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("game_pulse.Data.Models.SportsPosition", b =>
                {
                    b.Navigation("PlayerFavoritePositions");
                });

            modelBuilder.Entity("game_pulse.Data.Models.User", b =>
                {
                    b.Navigation("GamePlayers");

                    b.Navigation("Games");

                    b.Navigation("PlayerFavoritePositions");

                    b.Navigation("UserAccounts");

                    b.Navigation("UserInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
